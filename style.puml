@startuml

!if (%not(%variable_exists("$FONTNAME")))
!$FONTNAME = "Roboto"
!endif

!if (%not(%variable_exists("$FONTSIZE")))
!$FONTSIZE = 10
!endif

!ifdef DEFAULT
!$PRIMARYFONTCOLOR = "fff"
!$SECONDARY = "aaa"
!$ARROWCOLOR = "fff"
!$ARROWFONTCOLOR = "bbb"
!$BORDERCOLOR = "1b1b1b"
!$BOXBG = "2e2e2e"
!$LIGHTBORDERCOLOR = "767676"
!$LIGHTBG = "575757"
skinparam backgroundColor 777
skinparam backgroundColor 2A2A2A
!$ACCENT = "1a66c2"
!$ACCENTDARK = "002642"
skinparam shadowing false
skinparam stereotypeCBackgroundColor $ACCENT
skinparam titlefontcolor "fff"
skinparam actorbackgroundcolor 444
skinparam actorbbordercolor 444
skinparam actorbordercolor 1a66c2
!endif

!procedure font_style()
  fontColor $PRIMARYFONTCOLOR
  fontName $FONTNAME
  fontSize $FONTSIZE
  stereotypeFontColor $SECONDARY
  stereotypeFontSize $FONTSIZE
!endprocedure

!procedure basic_style()
  backgroundColor $BOXBG
  borderColor $BORDERCOLOR
!endprocedure

!procedure light_style()
  backgroundColor $LIGHTBG
  borderColor $LIGHTBORDERCOLOR
!endprocedure

!procedure accent_style()
  backgroundColor $ACCENT
  borderColor $ACCENTDARK
!endprocedure

!procedure arrow_style()
  arrowColor $ARROWCOLOR
  arrowFontName $FONTNAME
  arrowFontColor $ARROWFONTCOLOR
  arrowFontSize $FONTSIZE
!endprocedure

!procedure accent_style_actor()
 actorbackgroundColor 444
 actorborderColor fff
!endprocedure

' Class diagrams

skinparam circledCharacter {
  radius 8
  fontSize $FONTSIZE
  fontName $FONTNAME
}


skinparam class {
  basic_style()
  font_style()
  arrow_style()
  attributeFontColor $SECONDARY
  attributeFontSize $FONTSIZE
  attributeIconSize $FONTSIZE
}

' Sequence diagrams

skinparam actor {
  accent_style_actor()
  font_style()
}

skinparam participant {
  basic_style()
  font_style()
}

skinparam collections {
  basic_style()
  font_style()
}

skinparam SequenceBox{
  light_style()
  font_style()
}

' Component diagrams

skinparam interface {
  accent_style()
  font_style()
}

skinparam component {
  basic_style()
  font_style()
}

skinparam node {
  basic_style()
  font_style()
}

skinparam database {
  basic_style()
  font_style()
}

skinparam queue {
  basic_style()
  font_style()
}

' Use Case diagrams

skinparam usecase {
  basic_style()
  font_style()
  arrow_style()
}

skinparam activity {
  basic_style()
  font_style()
  arrow_style()
}

skinparam sequence {
  font_style()
  arrow_style()

  lifeLineBorderColor $ACCENT
  lifeLineBackgroundColor $LIGHTBG
}

skinparam boundary {
  accent_style()
  font_style()
}

skinparam control {
  accent_style()
  font_style()
}

skinparam entity {
  accent_style()
  font_style()
}

' State diagrams

skinparam state {
  basic_style()
  font_style()
  arrow_style()
  startColor $ACCENT
  endColor $ACCENTDARK
}

' Object diagrams

skinparam object {
  basic_style()
  font_style()
  arrow_style()
}

' Common

skinparam note {
  borderColor 1b1b1b
  backgroundColor 3a3a3a
  font_style()
}

skinparam cloud {
  basic_style()
  font_style()
  arrow_style()
}

skinparam rectangle {
  basic_style()
  font_style()
}

skinparam storage {
  basic_style()
  font_style()
}

@enduml
